#!/bin/ksh

#
#
# Copyright (c) 2022-2023 Piotr Trzpil  p.trzpil@protonmail.com
#
# Permission to use, copy, modify, and distribute 
# this software for any purpose with or without fee
# is hereby granted, provided that the above copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR
# DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
# FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
# CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.
#
#

noarg() {

  printf "To use this program you need to pass four arguments.\n" >&2
  printf "Script that will generate data\n" >&2
  printf "Script that will be forked and use passed data\n" >&2
  printf "Number of forks.\n" >&2
  printf "Data option \n" >&2
  printf "-s option will redirect data to stdin of fork command\n" >&2
  printf "-o option will redirect data as last argument of fork command\n" >&2
  exit

}

if test -z "$1"
then
  noarg
fi
loadscript="$1"

if test -z "$2"
then
  noarg
fi
forkscript="$2"

if test -z "$3"
then
  noarg
fi
forknum="$3"

if test -z "$4"
then
  noarg
fi
opt="$4"

if ! [[ $opt == '-o' || $opt == '-s' ]]
then
  noarg
fi

# !!! TODO check if forknum is number
# TODO make it number use as port and name as sun

#unix socket names we will use
sun_load="$( mktemp )"
sun_ans="$( mktemp )"

# ASK can we protect this why with unix file from race condition ?
# since temp file should never be removed to be safe
rm -r "$sun_load" "$sun_ans"

# on error send signal. on end send signal too
eval "$loadscript" | sndlog_data -su "$sun_load" &
#basicscan_load "$loadscript" "$sun_load" &

# errocheck this somehow
sndlog_data -lu "$sun_ans" &
loadpid="$!"

# Start forked programs
started_forks=1
while (( "$started_forks" <= "$forknum" ))
do

	started_forks="$(( started_forks + 1 ))"
	basicscan_fork "$sun_load" "$sun_ans" "$forkscript" "$opt" &
	sleep 1 # slow start
	#TODO check if there are no errors on starting forks

done

# we break on #1 because this is out last log job
while true
do

	sleep 5
	countjobs="$( jobs -p | wc -l )"
	if (( countjobs == 1 ))
	then
		break
	fi

done

kill -s SIGINT "$loadpid"

rm -rf "$sun_load"
rm -rf "$sun_ans"
