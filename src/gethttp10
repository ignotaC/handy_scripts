#!/bin/ksh

#
#
# Copyright (c) 2022-2023 Piotr Trzpil  p.trzpil@protonmail.com
#
# Permission to use, copy, modify, and distribute 
# this software for any purpose with or without fee
# is hereby granted, provided that the above copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR
# DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
# FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
# CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.
#
#



if (( "$#" < 1 ))
then
  printf "%s\n" "Provide at least url" >&2
  printf "%s\n\n" "Syntax: gethttp10 [option] [url]" >&2
  printf "%s\n" "-d" >&2
  printf "\t%s\n" "Disable https, use http. Still if server will" >&2
  printf "\t%s\n" "point on 301 to https, https will be turned on and used" >&2
  printf "%s\n" "-i IP" >&2
  printf "\t%s\n" "Pass IP of the server." >&2
  printf "\t%s\n" "Sothere is no need for resolving IP of domain." >&2
  printf "\t%s\n" "This can be usefull if we know the real IP of server." >&2
  printf "\t%s\n" "So we can bypass cloudflare sillyness, for example." >&2
  printf "%s\n" "-p port" >&2
  printf "\t%s\n" "Pass port http server is expected to use" >&2
  printf "\t%s\n" "Default is: Http = 80, https = 443" >&2
  printf "%s\n" "-C cookie" >&2
  printf "\t%s\n" "Pass cookie lines, multiply lines are fine but," >&2
  printf "\t%s\n" "You need to create whole cookie header line, like this:" >&2
  printf "\t\t%s\n" "Cookie: some=stuff" >&2
  printf "%s\n" "-U user-agent" >&2
  printf "\t%s\n" "Define what ever user agent you want to use" >&2
  printf "%s\n" "-H line" >&2
  printf "\t%s\n" "Add this line on end of http header" >&2
  printf "%s\n" "-h" >&2
  printf "\t%s\n" "print http header you would use and leave" >&2
  exit 1
fi

ua='gethttp10-'"$( uname -prs | tr -s '[:blank:]' '-' )"
cookie=''
IP='' 
port=''
httpsON=1
HTTP_req_end=''
show_HTTP=0

while getopts dhi:p:C:U:H: optchr
do

  case "$optchr" in
    d) httpsON=0 ;;
    i) IP="$OPTARG" ;;
    p) port="$OPTARG" ;;
    C) cookie="$OPTARG" ;;
    U) ua="$OPTARG" ;;
    H) HTTP_req_end="$( printf "%s\n%s" "$HTTP_req_end" "$OPTARG" )" ;;
    h) show_HTTP=1 ;;
    ?) exit ;;  #TODO say something on broken option
  esac

done
 
shift $(( OPTIND - 1 ))
if (( $# != 1 ))
then

  printf "Broken commands or url\n"
  exit

fi

keepport="$port"

#Set url on last parameter
for url in "$@"
do
	true
done

setreq() {

host="${url#*//}"
host="${host%%/*}"

if (( "$httpsON" ))
then
  httpscmd[0]='-c'
  httpscmd[1]='-e'
  httpscmd[2]="$host"
fi

path="${url#*//}"
if [[ "$path" == */* ]]
then
  path="${path#*/}"
  path='/'"$path"
else
  path='/'
fi

}

setreq
req() {

  printf "GET %s HTTP/1.0\n" "$path"
  printf "Host: %s\n" "$host"
  printf "User-Agent: %s\n" "$ua"
  printf "%s\n" "$cookie"
  printf  "%s\n" 'Accept: text/html,application/xhtml+xml'\
',application/xml;q=0.9,image/webp,*/*;q=0.8'
  printf "%s\n" 'Accept-Language: en-US,en;q=0.5'
  printf "%s\n" "$HTTP_req_end"

}

if (( show_HTTP == 1 ))
then

  req | awk NF
  exit

fi

#resolv empty
if [ ! "$IP" ]
then
  IP="$( gethostipv -64 "$host" | head -n 1 )"
fi

if (( "$httpsON" ))
then
  if [ ! "$port" ]
  then
    port=443
  fi
else
  if [ ! "$port" ]
  then
    port=80
  fi
fi

tempfile="$( mktemp )"
tempfile2="$( mktemp )"

while true
do
 
  req | httpreq_addcrlf |\
  nc -w '10' "${httpscmd[@]}" "$IP" "$port" > "$tempfile" || exit 2
  httphb_split -h < "$tempfile" > "$tempfile2"

  url="$host"'/'"$( lext -c 'Location: ' '' < "$tempfile2" | tr -d '\r\n' )"
  if test -z "$url"
  then
	  break;
  fi
  
  status_code="$( head -n 1 "$tempfile2" | lext -c ' ' ' ' )"

  if [[ "$status_code" != 3?? && "$status_code" != 201 ]]
  then
	  break;
  fi

  url="$( lext -c 'Location: ' '' < "$tempfile2" | tr -d '\r\n' )"
  if (( "$httpsON" == 0 ))
  	then
	if [[ 'https' == "${url%%://*}" ]] 
	then 
		 httpsON=1
		 if [ ! "$keepport" ]
		 then
			 port=443
		 fi
	fi
  fi

	
  setreq
  if [ ! "$IP" ]
  then
        IP="$( gethostipv -64 "$host" | head -n 1 )"
  fi

done

cat "$tempfile"
rm -f "$tempfile" "$tempfile2"
