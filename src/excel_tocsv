#!/bin/ksh

#
#
# Copyright (c) 2023 Piotr Trzpil  p.trzpil@protonmail.com
#
# Permission to use, copy, modify, and distribute 
# this software for any purpose with or without fee
# is hereby granted, provided that the above copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR
# DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
# FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
# CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.
#
#

if ! utilchk 'ssconvert' 'optchk'
then

  printf "Missing utility\n" >&2
  exit 1

fi

manual()  {

  printf "This program tries to generate csv file from excel file\n" >&2
  printf "It expects at leats one argument\n" >&2
  printf "Possible arguments:" >&2
  printf "options followed at end by Excel file/path to convert\n" >&2
  printf "Options:\n" >&2
  printf "-R recurse directory for excel files\n" >&2
  printf "-d use excel files in specified directory\n" >&2
  printf "-h show this text\n" >&2
  exit 1  # TODO add -- to invoke end of options

}

if (( $# < 1 )) 
then

  manual

fi

set -A argslist -- "$@"

# Last passed argument should be path so we save it and remove
path_arg="${argslist[ ${#argslist[@]} - 1 ]}"
unset  "argslist[ ${#argslist[@]} - 1 ]"

optlist="dRh"
optstr="$( optchk "${argslist[@]}" "$optlist" )" || manual

opt_d=0
opt_R=0
[[ $optstr == *'h'* ]] && manual
[[ $optstr == *'d'* ]] && opt_d=1
[[ $optstr == *'R'* ]] && opt_R=1

if (( opt_d && opt_R ))
then

  printf "You can't set both d and R options\n" >&2

fi

# regular file
if ! (( opt_d || opt_R ))
then

  if ! test -f "$path_arg"
  then

    printf "Specified file is not regular file\n" >&2
    exit 2

  fi

  newname="${path_arg%.*}"'.csv'
  
  if test -e "$newname"
  then

    printf "File %s already exists\n" "$newname" >&2
    exit 4 

  fi

  ! ssconvert "$path_arg" "$newname" && exit 3
  printf "%s -> %s\n" "$path_arg" "$newname"

  exit

fi

# directory
if ! test -d "$path_arg"
then

  printf "Specified file is not directory file\n" >&2
  exit 2

fi

csvfile_existed=0
tempfile="$( mktemp )"

depth=''
(( opt_d )) && depth='-maxdepth 1'

find "$path_arg" -type f $depth\
  \( -iname '*.xlw' -o -iname '*.xls' -o -iname '*.xlsx' \)\
  > "$tempfile"

while IFS= read -r file
do

  newname="${file%.*}"'.csv'
  
  if test -e "$newname"
  then

    printf "File %s already exists\n" "$newname" >&2
    csvfile_existed=1
    continue

  fi

  ! ssconvert "$file" "$newname" && exit 3
  printf "%s -> %s\n" "$file" "$newname"

done < "$tempfile"

rm -f "$tempfile"

if (( csvfile_existed ))
then

  printf "Some csv files already existed,\n" >&2
  printf "program did not overwrite them\n" >&2
  exit 4

fi
