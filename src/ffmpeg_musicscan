#!/bin/ksh

#
#
# Copyright (c) 2023 Piotr Trzpil  p.trzpil@protonmail.com
#
# Permission to use, copy, modify, and distribute 
# this software for any purpose with or without fee
# is hereby granted, provided that the above copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR
# DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
# FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
# CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.
#
#



if ! utilchk 'ffprobe' 'ffmpeg' 'ffmpeg_fullsupformat' 'optchk'\
  'find_inamelist'
then

  printf "Missing utilities.\n" >&2
  exit 1

fi

manual()  {

  printf "This program expects at leats one argument\n" >&2
  printf "Possible arguments:" >&2
  printf "options followed at end by path to music file\n" >&2
  printf "Options:\n" >&2
  printf "-R recurse directory for music files\n" >&2
  printf "-d use music files in specified directory\n" >&2
  printf "-h show this text\n" >&2
  printf "Options to turn off bugs detection:\n" >&2
  printf "-s turn off multiply stream detection\n" >&2
  printf "-f turn off broken format detection\n" >&2
  printf "-w turn off ffmpeg warnings detection\n" >&2
  printf "Option to enable fixing bugs: -F\n" >&2
  exit 1  # TODO add -- to invoke end of options

}

if (( $# < 1 )) 
then

  manual

fi

set -A argslist -- "$@"

# Last passed argument should be path so we save it and remove
path_arg="${argslist[ ${#argslist[@]} - 1 ]}"
unset  "argslist[ ${#argslist[@]} - 1 ]"

optlist="dRhsfwF"
optstr="$( optchk "${argslist[@]}" "$optlist" )" || manual

opt_d=0
opt_R=0
opt_s=0
opt_f=0
opt_w=0
opt_F=0
[[ $optstr == *'h'* ]] && manual
[[ $optstr == *'d'* ]] && opt_d=1
[[ $optstr == *'R'* ]] && opt_R=1
[[ $optstr == *'s'* ]] && opt_s=1
[[ $optstr == *'f'* ]] && opt_f=1
[[ $optstr == *'w'* ]] && opt_w=1
[[ $optstr == *'F'* ]] && opt_F=1

if (( opt_d && opt_R ))
then

  printf "You can't set both d and R options\n" >&2

fi

# regular file
if ! (( opt_d || opt_R ))
then

  if ! test -f "$path_arg"
  then

    printf "Not regular file: %s\n\n" "$path_arg" >&2
    exit 2

  fi

  bugs_detected=0

  detected_format="$( ffprobe -show_format "$path_arg" 2>/dev/null \
    | grep -Fi 'format_name' | tr -s "[:upper:]" "[:lower:]" )"
  detected_format="${detected_format##*=}"

  if [[ $detected_format == '' ]]
  then

    printf "Can't detect file format: %s\n\n" \
    "$path_arg" >&2
    exit 3

  fi


  file_format="$( echo "${path_arg##*.}" | tr -s "[:upper:]" "[:lower:]" )"

  if (( ! opt_f )) 
  then

    if [[ $detected_format != "$file_format" ]]
    then

      printf "File extension does not match detected file format\n" >&2
      printf "File extension: %s\nFile format: %s\n" \
        "$file_format" "$detected_format" >&2

      if ((  opt_F  ))
      then

        new_path_arg="${path_arg%.*}"'.'"$detected_format"
        if test -e "$new_path_arg"
        then

          printf "Can't correct format, because it would\n" >&2
          printf "overwrite file: %s\n" "$new_path_arg" >&2
          printf "File left with wrong format in suffix\n" >&2
          bugs_detected=1

        else

          mv "$path_arg" "$new_path_arg"
          path_arg="$new_path_arg"
          file_format="$detected_format"
          printf "File suffix was corrected\n" >&2
          printf "Current file name: %s\n" "$path_arg" >&2

        fi

      else

        bugs_detected=1

      fi

    fi

  fi

  tf="$( mktemp )"
  ffmpeg_fullsupformat | tr -s "[:upper:]" "[:lower:]" > "$tf"
  supported=0

  while IFS= read -r format
  do

    format='.'"${format#*.}"
    if [[ '.'$file_format == *"$format" ]]
    then

      supported=1
      break

    fi

  done < "$tf"

  rm -f "$tf"

  if (( supported == 0 ))
  then

    printf "File format is not supported by ffmpeg for %s\n\n" "$path_arg" >&2
    exit 3

  fi

  if (( ! opt_s )) 
  then
  
    streams_number="$( ffprobe -show_streams "$path_arg" 2>/dev/null |\
      grep index | wc -l | tr -d '[:space:]' )"

    if (( streams_number != 1 ))
    then

      printf "This file has %d streams\n" "$streams_number" >&2
      bugs_detected=1

    fi

  fi

  if (( ! opt_w ))
  then
 
    testvar=''
    testvar="$( ffprobe -loglevel 'warning' "$path_arg" 2>&1 )"
    if test -n "$testvar"
    then

      printf "Ffmpeg detected stream bug\n" >&2
      testvar="$( printf "%s" "$testvar" | awk NF )"
      printf "%s\n" "$testvar" >&2

      if (( opt_F ))
      then

        printf "Attempting to fix this.\n" >&2
        ffmpeg -nostdin -y -loglevel 'warning' -i "$path_arg" \
          -f "$file_format" -acodec copy "$tf" 2>/dev/null 1>/dev/null
        cp "$tf" "$path_arg"

        #retest
        testvar=''
        testvar="$( ffprobe -loglevel 'warning' "$path_arg" 2>&1 )"
        if test -n "$testvar"
        then

          printf "Failed to fix stream bug.\n" >&2
          bugs_detected=1

        else

          printf "It appears stream bug was fixed.\n" >&2

        fi

      else

        bugs_detected=1

      fi

    fi

  fi

  if (( bugs_detected ))
  then

    printf "Detected bugs in file: %s\n\n" "$path_arg" >&2
    exit 3

  fi

  exit

fi

# directory
if ! test -d "$path_arg"
then

  printf "Specified file is not directory file\n" >&2
  exit 2

fi

tf="$( mktemp )"
tf2="$( mktemp )"
tf3="$( mktemp )"

ffmpeg_fullsupformat > "$tf3"

depth=''
(( opt_d )) && depth='-maxdepth 1'

find_inamelist "$path_arg" -type f $depth < "$tf3" > "$tf2"

bugs_appeared=0

while IFS= read -r file
do

  bugs_detected=0
  
  detected_format="$( ffprobe -show_format "$file" 2>/dev/null \
    | grep -Fi 'format_name' | tr -s "[:upper:]" "[:lower:]" )"
  detected_format="${detected_format##*=}"

  if [[ $detected_format == '' ]]
  then

    printf "Can't detect file format: %s\n\n" \
     "$file" >&2
    bugs_appeared=1
    continue

  fi

  file_format="$( echo "${file##*.}" | tr -s "[:upper:]" "[:lower:]" )"

  if (( ! opt_f ))
  then

    if [[ $detected_format != "$file_format" ]]
    then

      printf "File extension does not match detected file format\n" >&2
      printf "File extension: %s\nFile format: %s\n" \
        "$file_format" "$detected_format" >&2

      if ((  opt_F  ))
      then

        new_path_arg="${file%.*}"'.'"$detected_format"
        if test -e "$new_path_arg"
        then

          printf "Can't correct format, because it would\n" >&2
          printf "overwrite file: %s\n" "$new_path_arg" >&2
          printf "File left with wrong format in suffix\n" >&2
          bugs_detected=1

        else

          mv "$file" "$new_path_arg"
          file="$new_path_arg"
          file_format="$detected_format"
          printf "File suffix was corrected\n" >&2
          printf "Current file name: %s\n" "$path_arg" >&2

        fi

      else

        bugs_detected=1

      fi

    fi

  fi

  tr -s "[:upper:]" "[:lower:]" < "$tf3" > "$tf"
  supported=0

  while IFS= read -r format
  do

    format='.'"${format#*.}"
    if [[ '.'$file_format == *"$format" ]]
    then

      supported=1
      break

    fi

  done < "$tf"

  if (( supported == 0 ))
  then

    printf "File format is not supported by ffmpeg for %s\n\n" "$file" >&2
    bugs_appeared=1
    continue

  fi

  if (( ! opt_s ))
  then

    streams_number="$( ffprobe -show_streams "$file" 2>/dev/null |\
      grep index | wc -l | tr -d '[:space:]' )"

    if (( streams_number != 1 ))
    then

      printf "This file has %d streams\n" "$streams_number" >&2
      bugs_detected=1

    fi

  fi

  if (( ! opt_w ))
  then

    testvar=''
    testvar="$( ffprobe -loglevel 'warning' "$file" 2>&1 )"
    if test -n "$testvar"
    then

      printf "Ffmpeg detected stream bug\n" >&2
      testvar="$( printf "%s" "$testvar" | awk NF )"
      printf "%s\n" "$testvar" >&2

      if (( opt_F ))
      then

        printf "Attempting to fix this.\n" >&2
        ffmpeg -nostdin -y -loglevel 'warning' -i "$file" \
          -f "$file_format" -acodec copy "$tf" 2>/dev/null 1>/dev/null
        cp "$tf" "$file"

        #retest
        testvar=''
        testvar="$( ffprobe -loglevel 'warning' "$file" 2>&1 )"
        if test -n "$testvar"
        then

          printf "Failed to fix stream bug.\n" >&2
          bugs_detected=1

        else

          printf "It appears stream bug was fixed.\n" >&2

        fi

      else

        bugs_detected=1

      fi

    fi

  fi

  if (( bugs_detected ))
  then

    bugs_appeared=1
    printf "Detected bugs in file: %s\n\n" "$file" >&2

  fi

done < "$tf2"

rm -f "$tf" "$tf2" "$tf3"

if (( bugs_detected ))
then

  exit 3

fi

exit



